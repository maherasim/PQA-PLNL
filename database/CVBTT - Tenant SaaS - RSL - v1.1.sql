CREATE TYPE "vendor_type_enum" AS ENUM (
  'supplier',
  'contractor',
  'both'
);

CREATE TYPE "billing_cycle_enum" AS ENUM (
  'monthly',
  'quarterly',
  'yearly'
);

CREATE TYPE "document_type" AS ENUM (
  'Certificate',
  'License',
  'Contract'
);

CREATE TABLE "countries" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "name_common" varchar(100) NOT NULL,
  "name_official" varchar(200) NOT NULL,
  "iso_alpha2" char(2) UNIQUE NOT NULL,
  "iso_alpha3" char(3) UNIQUE NOT NULL,
  "iso_numeric" char(3) UNIQUE NOT NULL,
  "phone_code" smallint,
  "currency_code" varchar(3),
  "is_active" boolean DEFAULT true,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz DEFAULT (now())
);

CREATE TABLE "status" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "scope" varchar(50) NOT NULL,
  "code" varchar(50) NOT NULL,
  "description" varchar(150),
  "is_initial" boolean DEFAULT false,
  "is_active" boolean DEFAULT true,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz DEFAULT (now())
);

CREATE TABLE "status_transitions" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "scope" varchar(50) NOT NULL,
  "from_status_id" uuid,
  "to_status_id" uuid NOT NULL,
  "is_active" boolean DEFAULT true,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz DEFAULT (now())
);

CREATE TABLE "identifier_types" (
  "id" SERIAL PRIMARY KEY,
  "code" varchar(20) UNIQUE NOT NULL,
  "name" varchar(100) NOT NULL,
  "description" text,
  "format_pattern" varchar(200),
  "validation_regex" varchar(500),
  "country_id" uuid,
  "is_global" boolean DEFAULT false,
  "is_active" boolean DEFAULT false,
  "priority_score" integer DEFAULT 50,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz DEFAULT (now())
);

CREATE TABLE "categories" (
  "id" bigint PRIMARY KEY,
  "parent_key" bigint,
  "code" varchar(20) NOT NULL,
  "title" varchar(500) NOT NULL,
  "is_active" boolean DEFAULT true,
  "level" integer NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz DEFAULT (now())
);

CREATE TABLE "documents" (
  "id" SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(250) NOT NULL,
  "type" document_type NOT NULL,
  "description" text,
  "required_fields" json,
  "max_file_size_mb" integer DEFAULT 10,
  "allowed_extensions" varchar(255) DEFAULT 'pdf,doc,docx,jpg,jpeg,png',
  "is_active" boolean NOT NULL DEFAULT true,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz DEFAULT (now())
);

CREATE TABLE "users" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "email" varchar(255) UNIQUE NOT NULL,
  "email_verified" boolean NOT NULL DEFAULT false,
  "email_verified_at" timestamptz,
  "full_name" varchar(100) NOT NULL,
  "user_country_id" uuid,
  "mobile_country_id" uuid,
  "mobile_number" varchar(50),
  "status" uuid NOT NULL,
  "last_login_at" timestamptz,
  "last_organization_id" uuid,
  "password_hash" varchar(255) NOT NULL,
  "password_created_at" timestamptz DEFAULT (now()),
  "password_last_changed" timestamptz DEFAULT (now()),
  "password_expires_at" timestamptz,
  "password_change_required" boolean DEFAULT false,
  "failed_login_attempts" integer DEFAULT 0,
  "last_failed_login" timestamptz,
  "account_locked_until" timestamptz,
  "last_successful_login" timestamptz,
  "created_at" timestamptz DEFAULT (now()),
  "created_by" uuid NOT NULL,
  "updated_at" timestamptz DEFAULT (now()),
  "updated_by" uuid,
  "excluded_at" timestamptz DEFAULT (now()),
  "excluded_by" uuid
);

CREATE TABLE "organizations" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "name" varchar(250) NOT NULL,
  "status" uuid NOT NULL,
  "country_id" uuid NOT NULL,
  "identifier_type_id" integer NOT NULL,
  "identifier_value" varchar(50) NOT NULL,
  "website" varchar(250),
  "phone_country_id" uuid,
  "phone" varchar(50),
  "logo_url" varchar(250),
  "email" varchar(150) UNIQUE NOT NULL,
  "address" varchar(200) NOT NULL,
  "mailing_address" varchar(200),
  "description" text,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "created_by" uuid NOT NULL,
  "updated_at" timestamptz,
  "updated_by" uuid,
  "excluded_at" timestamptz DEFAULT (now()),
  "excluded_by" uuid
);

CREATE TABLE "user_organization_role_mapping" (
  "organization_id" uuid,
  "user_id" uuid,
  "role_id" uuid,
  "status" uuid NOT NULL,
  "start_date" timestamptz NOT NULL DEFAULT (now()),
  "end_date" timestamptz,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "granted_at" timestamptz,
  "updated_at" timestamptz,
  "created_by" uuid NOT NULL,
  "granted_by" uuid,
  "updated_by" uuid,
  PRIMARY KEY ("organization_id", "user_id", "role_id")
);

CREATE TABLE "organization_documents" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "organization_id" uuid NOT NULL,
  "document_id" smallint NOT NULL,
  "title" varchar(255) NOT NULL,
  "description" text,
  "s3_bucket" varchar(255) NOT NULL,
  "s3_key" varchar(500) NOT NULL,
  "s3_region" varchar(50) NOT NULL,
  "s3_url" text,
  "original_filename" varchar(255) NOT NULL,
  "file_extension" varchar(10) NOT NULL,
  "file_size_bytes" bigint NOT NULL,
  "mime_type" varchar(100) NOT NULL,
  "checksum" varchar(255),
  "expiration_date" date,
  "issue_date" date,
  "issuer" varchar(255),
  "document_number" varchar(100),
  "custom_metadata" json,
  "previous_document_id" uuid,
  "status" uuid NOT NULL,
  "uploaded_by" uuid,
  "uploaded_at" timestamp NOT NULL DEFAULT (now()),
  "updated_by" uuid,
  "updated_at" timestamp NOT NULL DEFAULT (now())
);

CREATE TABLE "organization_categories" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "organization_id" uuid NOT NULL,
  "category_key" bigint NOT NULL,
  "is_primary" boolean DEFAULT false,
  "is_active" boolean DEFAULT true,
  "expertise_level" varchar(20),
  "start_date" date NOT NULL,
  "description" text,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "created_by" uuid NOT NULL,
  "updated_at" timestamptz DEFAULT (now()),
  "updated_by" uuid
);

CREATE TABLE "tenants" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "organization_id" uuid NOT NULL,
  "status" uuid NOT NULL,
  "domain" varchar(255),
  "db_address" varchar(100),
  "db_name" varchar(50),
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz DEFAULT (now()),
  "deleted_at" timestamptz,
  "created_by" uuid NOT NULL,
  "updated_by" uuid,
  "deleted_by" uuid
);

CREATE TABLE "subscription_plans" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "name" varchar(255) NOT NULL,
  "description" text,
  "price" decimal(10,2) NOT NULL,
  "billing_cycle" billing_cycle_enum NOT NULL DEFAULT 'monthly',
  "trial_days" integer DEFAULT 0,
  "status" uuid NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "created_by" uuid NOT NULL,
  "updated_at" timestamptz,
  "updated_by" uuid,
  "deleted_at" timestamptz,
  "deleted_by" uuid
);

CREATE TABLE "subscriptions" (
  "tenant_id" uuid,
  "plan_id" uuid,
  "status" uuid NOT NULL,
  "subscription_period_start" timestamp NOT NULL,
  "subscription_period_end" timestamp NOT NULL,
  "amount" decimal(10,2) NOT NULL,
  "currency" varchar(3) NOT NULL DEFAULT 'USD',
  "trial_ends_at" timestamptz,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "created_by" uuid NOT NULL,
  "updated_at" timestamptz,
  "updated_by" uuid,
  "canceled_at" timestamptz,
  "canceled_by" uuid,
  PRIMARY KEY ("tenant_id", "plan_id")
);

CREATE TABLE "vendor_invitations" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "tenant_id" uuid NOT NULL,
  "existing_user_id" uuid,
  "existing_organization_id" uuid,
  "temp_company_name" varchar(255),
  "temp_vendor_manager_name" varchar(255),
  "temp_vendor_manager_email" varchar(255),
  "invitation_token" varchar(255) UNIQUE NOT NULL,
  "status" uuid NOT NULL,
  "expires_at" timestamp NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "created_by" uuid NOT NULL,
  "updated_at" timestamptz,
  "updated_by" uuid,
  "canceled_at" timestamptz,
  "canceled_by" uuid
);

CREATE TABLE "roles" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "role_name" varchar(50) NOT NULL,
  "description" text,
  "key_responsibilities" text
);

CREATE TABLE "permissions" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "permissions_name" varchar(100) NOT NULL,
  "modules_auth" jsonb DEFAULT '{}'
);

CREATE TABLE "roles_permissions" (
  "role_id" uuid,
  "permissions_id" uuid,
  "status" uuid NOT NULL,
  "created_at" timestamptz NOT NULL DEFAULT (now()),
  "updated_at" timestamptz,
  "canceled_at" timestamptz,
  "created_by" uuid NOT NULL,
  "updated_by" uuid,
  "canceled_by" uuid,
  PRIMARY KEY ("role_id", "permissions_id")
);

CREATE TABLE "vendors" (
  "id" uuid PRIMARY KEY DEFAULT (uuid_generate_v4()),
  "tenant_id" uuid NOT NULL,
  "organization_id" uuid NOT NULL,
  "vendor_type" vendor_type_enum NOT NULL,
  "status" uuid NOT NULL,
  "invited_by" uuid NOT NULL,
  "invited_at" timestamptz NOT NULL DEFAULT (now()),
  "accepted_at" timestamptz,
  "accepted_by" uuid,
  "rejected_at" timestamptz,
  "rejection_reason" text,
  "expires_at" timestamptz,
  "created_at" timestamp NOT NULL DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  "updated_by" uuid
);

CREATE UNIQUE INDEX "idx_countries_iso_alpha2" ON "countries" ("iso_alpha2");

CREATE UNIQUE INDEX "idx_countries_iso_alpha3" ON "countries" ("iso_alpha3");

CREATE UNIQUE INDEX "idx_status_scope_code" ON "status" ("scope", "code");

CREATE UNIQUE INDEX "idx_transition_from_to" ON "status_transitions" ("from_status_id", "to_status_id");

CREATE INDEX "idx_transitions_scope" ON "status_transitions" ("scope");

CREATE UNIQUE INDEX "idx_identifier_types_code" ON "identifier_types" ("code");

CREATE UNIQUE INDEX "idx_users_email_unique" ON "users" ("email");

CREATE UNIQUE INDEX "idx_vendors_email_unique" ON "organizations" ("email");

CREATE UNIQUE INDEX "idx_id_type_company" ON "organizations" ("country_id", "identifier_type_id", "identifier_value");

CREATE INDEX "idx_documents_org_type" ON "organization_documents" ("organization_id", "document_id");

CREATE UNIQUE INDEX "idx_documents_s3_location" ON "organization_documents" ("s3_bucket", "s3_key");

CREATE INDEX "idx_documents_previous_id" ON "organization_documents" ("previous_document_id");

CREATE UNIQUE INDEX "unique_org_category" ON "organization_categories" ("organization_id", "category_key");

CREATE INDEX "idx_org_active_categories" ON "organization_categories" ("organization_id", "is_active");

CREATE UNIQUE INDEX "idx_tenant_organization_unique" ON "vendors" ("tenant_id", "organization_id");

COMMENT ON COLUMN "countries"."name_common" IS 'Common name';

COMMENT ON COLUMN "countries"."name_official" IS 'Official name';

COMMENT ON COLUMN "countries"."iso_alpha2" IS 'ISO 3166-1 alpha-2 codes';

COMMENT ON COLUMN "countries"."iso_alpha3" IS 'ISO 3166-1 alpha-3 codes';

COMMENT ON COLUMN "countries"."iso_numeric" IS 'ISO 3166-1 numeric';

COMMENT ON COLUMN "status"."scope" IS 'Status contex: user, organization, tenant, etc.';

COMMENT ON COLUMN "status"."is_initial" IS 'Initial status for new rows';

COMMENT ON COLUMN "status_transitions"."is_active" IS 'Transição ativa';

COMMENT ON TABLE "identifier_types" IS 'Registry of all supported business identifier types worldwide';

COMMENT ON COLUMN "identifier_types"."code" IS 'Unique short code for the identifier type';

COMMENT ON COLUMN "identifier_types"."name" IS 'Full name of the identifier type';

COMMENT ON COLUMN "identifier_types"."description" IS 'Detailed description of the identifier purpose and usage';

COMMENT ON COLUMN "identifier_types"."format_pattern" IS 'Human-readable format pattern (X=digit, A=letter, C=country code)';

COMMENT ON COLUMN "identifier_types"."validation_regex" IS 'Regular expression for basic format validation';

COMMENT ON COLUMN "identifier_types"."country_id" IS 'Country where this identifier is used (NULL for global identifiers)';

COMMENT ON COLUMN "identifier_types"."is_global" IS 'Whether this identifier is used globally across countries';

COMMENT ON COLUMN "identifier_types"."is_active" IS 'Only VAT ID is going to be active at this moment';

COMMENT ON COLUMN "identifier_types"."priority_score" IS 'Priority score for duplicate detection (higher = more reliable)';

COMMENT ON TABLE "documents" IS 'Domain table defining all possible document in the system';

COMMENT ON COLUMN "documents"."name" IS 'Document name';

COMMENT ON COLUMN "documents"."type" IS 'Document type name (e.g., Certificate, License, Contract)';

COMMENT ON COLUMN "documents"."description" IS 'Detailed description of document type';

COMMENT ON COLUMN "documents"."required_fields" IS 'JSON schema for required metadata fields';

COMMENT ON COLUMN "documents"."max_file_size_mb" IS 'Maximum file size in megabytes';

COMMENT ON COLUMN "documents"."allowed_extensions" IS 'Comma-separated allowed file extensions';

COMMENT ON COLUMN "documents"."is_active" IS 'Whether this document type is available for upload';

COMMENT ON TABLE "users" IS 'CONSTRAINT users_pending_no_password
CHECK (status != ''pending_activation'' OR password_hash IS NULL)

CONSTRAINT users_active_must_have_password
CHECK (status != ''active'' OR password_hash IS NOT NULL)
';

COMMENT ON COLUMN "users"."id" IS 'UUID v4 - Sensitive user data requires maximum security';

COMMENT ON COLUMN "users"."password_hash" IS 'bcrypt/Argon2id hashed';

COMMENT ON TABLE "organizations" IS 'External organization that relates to the CVBTT or other organizations (vendors)';

COMMENT ON COLUMN "organizations"."id" IS 'UUID v4 - Sensitive data';

COMMENT ON TABLE "user_organization_role_mapping" IS 'Contains the users from a organization and their role';

COMMENT ON TABLE "organization_documents" IS 'Documents uploaded by organizations and stored in AWS S3';

COMMENT ON COLUMN "organization_documents"."organization_id" IS 'Organization that owns this document';

COMMENT ON COLUMN "organization_documents"."document_id" IS 'Type of document';

COMMENT ON COLUMN "organization_documents"."title" IS 'User-friendly document title';

COMMENT ON COLUMN "organization_documents"."description" IS 'Optional document description';

COMMENT ON COLUMN "organization_documents"."s3_bucket" IS 'AWS S3 bucket name where file is stored';

COMMENT ON COLUMN "organization_documents"."s3_key" IS 'Full S3 object key/path to the file';

COMMENT ON COLUMN "organization_documents"."s3_region" IS 'AWS region where bucket is located';

COMMENT ON COLUMN "organization_documents"."s3_url" IS 'Pre-signed or public URL for file access';

COMMENT ON COLUMN "organization_documents"."original_filename" IS 'Original filename when uploaded';

COMMENT ON COLUMN "organization_documents"."file_extension" IS 'File extension (pdf, jpg, etc.)';

COMMENT ON COLUMN "organization_documents"."file_size_bytes" IS 'File size in bytes';

COMMENT ON COLUMN "organization_documents"."mime_type" IS 'MIME type of the file';

COMMENT ON COLUMN "organization_documents"."checksum" IS 'File checksum for integrity verification';

COMMENT ON COLUMN "organization_documents"."expiration_date" IS 'Document expiration date if applicable';

COMMENT ON COLUMN "organization_documents"."issue_date" IS 'Document issue/creation date';

COMMENT ON COLUMN "organization_documents"."issuer" IS 'Entity that issued the document';

COMMENT ON COLUMN "organization_documents"."document_number" IS 'Official document number/identifier';

COMMENT ON COLUMN "organization_documents"."custom_metadata" IS 'Additional metadata specific to document type';

COMMENT ON COLUMN "organization_documents"."previous_document_id" IS 'previous document id, when the document is replaced';

COMMENT ON COLUMN "organization_documents"."uploaded_by" IS 'User ID who uploaded the document';

COMMENT ON COLUMN "organization_documents"."updated_by" IS 'User ID who updated the document';

COMMENT ON TABLE "organization_categories" IS 'This table manages the many-to-many relationship between organizations and UNSPSC categories.

Key Features:
- Supports multiple categories per organization
- Tracks expertise level and experience years
- Soft delete capability with is_active flag
- Primary category designation for main business focus
- Audit trail with created_by and updated_by
- Optimized indexes for common query patterns

Business Rules:
- An organization can have multiple categories
- Only one category can be marked as primary per organization
- Inactive relationships are preserved for historical data
- Experience years help in supplier qualification

Usage in Multi-Tenant Context:
- Organizations can be suppliers across multiple tenants
- Categories help in supplier discovery and matching
- Expertise levels enable better supplier qualification
- Historical data supports supplier performance tracking
';

COMMENT ON COLUMN "organization_categories"."category_key" IS 'Foreign key referencing the UNSPSC category key';

COMMENT ON COLUMN "organization_categories"."is_primary" IS 'Indicates if this is the primary category for the organization';

COMMENT ON COLUMN "organization_categories"."is_active" IS 'Soft delete flag - indicates if this relationship is currently active';

COMMENT ON COLUMN "organization_categories"."expertise_level" IS 'Level of expertise in this category (e.g., basic, intermediate, advanced, expert)';

COMMENT ON COLUMN "organization_categories"."start_date" IS 'The date when the organization started working in this category';

COMMENT ON COLUMN "organization_categories"."description" IS 'Additional description or notes about the organization expertise in this category';

COMMENT ON COLUMN "organization_categories"."created_at" IS 'Timestamp when the relationship was created';

COMMENT ON COLUMN "organization_categories"."created_by" IS 'User who created this relationship';

COMMENT ON COLUMN "organization_categories"."updated_at" IS 'Timestamp when the relationship was last updated';

COMMENT ON COLUMN "organization_categories"."updated_by" IS 'User who last updated this relationship';

COMMENT ON TABLE "tenants" IS 'Tenant management table';

COMMENT ON COLUMN "tenants"."domain" IS 'Related to subdomain of the tenant';

COMMENT ON COLUMN "tenants"."db_address" IS 'Used in case of different server address for the tenant';

COMMENT ON COLUMN "tenants"."db_name" IS 'Used in case a tenant has its own database (database per tenant)';

COMMENT ON TABLE "subscription_plans" IS 'Avaliable subscription plans';

COMMENT ON TABLE "subscriptions" IS 'Tenants subscriptions';

COMMENT ON COLUMN "roles"."id" IS 'UUID v4 - Low volume reference table';

COMMENT ON COLUMN "roles"."description" IS 'Examples:
  super_admin
  procurement_admin         // CVB - Central Vendor Bureau
  screening_officer         // PQA/CVB - Prequalification Administrator
  technical_evaluator       // SME - Subject Matter Expert
  finance_evaluator         // Internal finance officer
  hsse_evaluator            // Health, Safety, Security & Environment
  legal_compliance_officer  // Legal/Compliance Officer
  scm_head                  // Supply Chain Management Head
  plant_manager             // Plant Manager
  president                 // Final approver
  finance_evaluator         // Internal finance officer
  hsse_evaluator            // Health, Safety, Security & Environment
  legal_compliance_officer  // Legal/Compliance Officer
  scm_head                  // Supply Chain Management Head
  plant_manager             // Plant Manager
  president                 // Final approver
  finance_evaluator         // Internal finance officer
  hsse_evaluator            // Health, Safety, Security & Environment
  legal_compliance_officer  // Legal/Compliance Officer
  scm_head                  // Supply Chain Management Head
  plant_manager             // Plant Manager
  president                 // Final approver
  vendor_admin              // Vendor organization representative
  vendor_user               // Vendor user
  auditor                   // Auditor role ';

COMMENT ON TABLE "permissions" IS 'Contains the permissions verified by the software';

COMMENT ON COLUMN "permissions"."id" IS 'This can be an uuid (generated) or a code associated to a specific module.
Examples:
 - Create a form
 - View a form
 - Authorize a form
 - Create an user
 - Reset user password
';

COMMENT ON COLUMN "permissions"."modules_auth" IS 'Check if this will be a list or a specific transaction';

COMMENT ON TABLE "vendors" IS 'Tenant - vendor relationship';

ALTER TABLE "status_transitions" ADD FOREIGN KEY ("from_status_id") REFERENCES "status" ("id");

ALTER TABLE "status_transitions" ADD FOREIGN KEY ("to_status_id") REFERENCES "status" ("id");

ALTER TABLE "identifier_types" ADD FOREIGN KEY ("country_id") REFERENCES "countries" ("id");

ALTER TABLE "categories" ADD FOREIGN KEY ("parent_key") REFERENCES "categories" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("user_country_id") REFERENCES "countries" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("mobile_country_id") REFERENCES "countries" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("last_organization_id") REFERENCES "organizations" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "users" ADD FOREIGN KEY ("excluded_by") REFERENCES "users" ("id");

ALTER TABLE "organizations" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "organizations" ADD FOREIGN KEY ("country_id") REFERENCES "countries" ("id");

ALTER TABLE "organizations" ADD FOREIGN KEY ("identifier_type_id") REFERENCES "identifier_types" ("id");

ALTER TABLE "organizations" ADD FOREIGN KEY ("phone_country_id") REFERENCES "countries" ("id");

ALTER TABLE "organizations" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "organizations" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "organizations" ADD FOREIGN KEY ("excluded_by") REFERENCES "users" ("id");

ALTER TABLE "user_organization_role_mapping" ADD FOREIGN KEY ("organization_id") REFERENCES "organizations" ("id");

ALTER TABLE "user_organization_role_mapping" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "user_organization_role_mapping" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");

ALTER TABLE "user_organization_role_mapping" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "user_organization_role_mapping" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "user_organization_role_mapping" ADD FOREIGN KEY ("granted_by") REFERENCES "users" ("id");

ALTER TABLE "user_organization_role_mapping" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "organization_documents" ADD FOREIGN KEY ("organization_id") REFERENCES "organizations" ("id");

ALTER TABLE "organization_documents" ADD FOREIGN KEY ("document_id") REFERENCES "documents" ("id");

ALTER TABLE "organization_documents" ADD FOREIGN KEY ("previous_document_id") REFERENCES "organization_documents" ("id");

ALTER TABLE "organization_documents" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "organization_documents" ADD FOREIGN KEY ("uploaded_by") REFERENCES "users" ("id");

ALTER TABLE "organization_documents" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "organization_categories" ADD FOREIGN KEY ("organization_id") REFERENCES "organizations" ("id");

ALTER TABLE "organization_categories" ADD FOREIGN KEY ("category_key") REFERENCES "categories" ("id");

ALTER TABLE "organization_categories" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "organization_categories" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "tenants" ADD FOREIGN KEY ("organization_id") REFERENCES "organizations" ("id");

ALTER TABLE "tenants" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "tenants" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "tenants" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "tenants" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("id");

ALTER TABLE "subscription_plans" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "subscription_plans" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "subscription_plans" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "subscription_plans" ADD FOREIGN KEY ("deleted_by") REFERENCES "users" ("id");

ALTER TABLE "subscriptions" ADD FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id");

ALTER TABLE "subscriptions" ADD FOREIGN KEY ("plan_id") REFERENCES "subscription_plans" ("id");

ALTER TABLE "subscriptions" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "subscriptions" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "subscriptions" ADD FOREIGN KEY ("canceled_by") REFERENCES "users" ("id");

ALTER TABLE "vendor_invitations" ADD FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id");

ALTER TABLE "vendor_invitations" ADD FOREIGN KEY ("existing_user_id") REFERENCES "users" ("id");

ALTER TABLE "vendor_invitations" ADD FOREIGN KEY ("existing_organization_id") REFERENCES "organizations" ("id");

ALTER TABLE "vendor_invitations" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "vendor_invitations" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "vendor_invitations" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "vendor_invitations" ADD FOREIGN KEY ("canceled_by") REFERENCES "users" ("id");

ALTER TABLE "roles_permissions" ADD FOREIGN KEY ("role_id") REFERENCES "roles" ("id");

ALTER TABLE "roles_permissions" ADD FOREIGN KEY ("permissions_id") REFERENCES "permissions" ("id");

ALTER TABLE "roles_permissions" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "roles_permissions" ADD FOREIGN KEY ("created_by") REFERENCES "users" ("id");

ALTER TABLE "roles_permissions" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");

ALTER TABLE "roles_permissions" ADD FOREIGN KEY ("canceled_by") REFERENCES "users" ("id");

ALTER TABLE "vendors" ADD FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id");

ALTER TABLE "vendors" ADD FOREIGN KEY ("organization_id") REFERENCES "organizations" ("id");

ALTER TABLE "vendors" ADD FOREIGN KEY ("status") REFERENCES "status" ("id");

ALTER TABLE "vendors" ADD FOREIGN KEY ("invited_by") REFERENCES "users" ("id");

ALTER TABLE "vendors" ADD FOREIGN KEY ("accepted_by") REFERENCES "users" ("id");

ALTER TABLE "vendors" ADD FOREIGN KEY ("updated_by") REFERENCES "users" ("id");
